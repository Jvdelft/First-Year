"""This is a template for State Machine Modules

   A State Machine module is a python file that contains a  `loop` function.
   Similar to how an Arduino program operates, `loop` is called continuously:
   when the function terminates, it is called again.

   The `loop` function should continuously listens to messages generated by:
   - the path detector (concerning the path to follow),
   - the sign detector (concerning road signs detected, if any),
   - the remote command operator (concerning commands to start/stop driving,
     or do specific manoeuvers)
   - and the arduino controller of the physical car (concerning the current
     state; possible sensor readings, ...)

   and decide on how to drive the car correspondingly. See the description of
   the `loop` method below for more details.

   This simplistic State Machine responds to remote commands "GO", "STOP"
   and "TEST_COMM". In addition, it listens to path information from the
   Simplistic Path detector, and sends actuation commands that are
   compatible with the simulator.
"""


import logging
import time
from event import Event
from car import Car

# constants for the different states in which we can be operating
IDLE = 1
STOPPED = 2
MOVING = 3
# You can add other states here
last_sign = ""
last_path = {'heading':0, 'car_center':(0,0), 'clear_left':False ,'clear_right': False}
sign_time = 0
special_heading = 0
special_heading_time = 0
priority = True
command_list = []
stop_time = 0
#sign_execution = 0
sign_list = []

# Setup up the state machine. The following code is called when the state
# machine is loaded for the first time.
logging.info('Simplistic StateMachine has been initialized')

# The next variable is a global variable used to store the state between
# successive calls to loop()
state = IDLE


def loop():
    '''State machine control loop.
    Like an arduino program, this method is called repeatedly: whenever
    it exits it is called again. Inside the function, call:
    - time.sleep(x) to sleep for x seconds (x can be fractional)
    - Event.poll() to get the next event (output of Path and/or Sign detector,
      status sent by the car, or remote command).
    - Car.send(x,y,u,v) to communicate two integers (x and y) and
      two floats(u,v) to the car. How the car interprets this message depends
      on how you implement the arduino nano. For the simulator, x, and y
      are ignored while u encodes the speed and v the relative angle to turn
      to.
    '''
    global state
    global last_sign
    global sign_time
    global last_path
    global priority
    global command_list
    global sign_list
    global special_heading
    global special_heading_time
    global stop_time
    #global sign_execution

    print("command_list",command_list)
    print("sign_list", sign_list)
    if (time.time() - sign_time) > 3:
        last_sign = ""
    if (time.time() - special_heading_time) > 1.2:
        special_heading = 0
    if (time.time() - sign_time) > 1:
        priority = True
    event = Event.poll()

    if event is not None :
        if event.type == Event.CMD and event.val == "GO" :
            #A command by the remote computer to start the car or the car starts after 
            #stopping at road sign
            logging.info("remotely ordered to GO!")
            state = MOVING

        elif event.type == Event.CMD and event.val == "STOP":
            logging.info("remotely ordered to stop")
            emergency_stop()  # emergency_stop is further defined below

        elif event.type == Event.CMD and event.val == "TEST_COMM":
            # When it receives this command, the state machine sends a test
            # message to the Arduino. If the Arduino is programmed with
            # "testComm.ino", the LED of the Arduino will change its state and
            # the Arduino will send the message back. This can be seen in the
            # remote terminal that runs "start_car.py" as a logging message (see
            # Event.CAR below). For more info, see the sreencast describing
            # "testComm.ino".
            Car.send(5, -10, 3.14, -37.2)
        # Note that you can decide to act on  other evant.val value for events
        # of type Event.CMD!

        elif event.type == Event.CMD and event.val == "TURN_LEFT":
            logging.info("Remotely ordered to turn left when  possible")
            command_list.append('LEFT')

        elif event.type == Event.CMD and event.val == "TURN_RIGHT":
            logging.info("Remotely ordered to turn right when possible")
            command_list.append('RIGHT')

        elif event.type == Event.CMD and event.val == "CLEAR":
            logging.info("Remotely deleted all pending commands")
            command_list = []

        elif event.type == Event.PATH:
            path_dict = event.val
            heading = path_dict['heading']

            if len(sign_list) != 0:
                if 'STOP' in sign_list :
                    sign_list.remove('STOP')
                    stop_time = time.time()

                elif sign_list[0] == 'LEFT' and path_dict['clear_left'] and state == MOVING:
                    special_heading = 8
                    special_heading_time = time.time()
                    del sign_list[0]
                    priority = False

                elif sign_list[0] == 'RIGHT' and path_dict['clear_right'] and state == MOVING:
                    special_heading = -8
                    special_heading_time = time.time()               
                    del sign_list[0] 
                    priority = False       

            if not priority:
                if time.time()-stop_time >= 0.8 and stop_time != 0:
                    emergency_stop()
                    stop_time = 0
                    

                if state == MOVING:
                    handle_path_event(event, special_heading)         

            elif priority and state==MOVING:
            # You received the PATH dictionary emitted by the path detector
            # you can access this dict by event.val
            # actuate car coresspondingly, change state if relevant
            # Here we actuate the car by calling the handle_path_event function
            # handle_path_event is defined below
                last_path = event.val
                if len(command_list) != 0:
                    if command_list[0] == 'LEFT' and path_dict['clear_left'] and state == MOVING:  
                        heading = 8
                        special_heading = 8  
                        special_heading_time = time.time()
                        actuate_heading(heading)
                        del command_list[0]

                    elif command_list[0] == 'RIGHT' and path_dict['clear_right'] and state==MOVING:
                        heading = -8
                        special_heading = -8
                        special_heading_time = time.time()
                        actuate_heading(heading)
                        del command_list[0]
                else:
                    handle_path_event(event, special_heading)
                  
        elif event.type == Event.SIGN:
             if event.val["sign"] != last_sign:
                last_sign = event.val["sign"]
                
                priority = False
                handle_sign(event, sign_list)
                sign_time = time.time()

            # You received the SIGN dictionary emitted by the sign detector
            # you can access this dict by event.val
            # actuate car coresspondingly, change state if relevant
        elif event.type == Event.CAR:
            # You received a message from the arduino that is operating the car
            # In this case, event.val contains a dictionary with keys x,y,u,v
            # where x and y are ints; u,v, are floats.
            # Act on this message depending on how you implemented the arduino
            # (e.g., is the arduino sending that there is an obstacle in front
            # and you should stop ?)
            logging.info("Received CAR event with x=%d, y=%d, u=%f, v=%f" %
                (event.val['x'], event.val['y'], event.val['u'], event.val['v']))
            if event.val['x'] == 1:
                emergency.stop()
                Car.send(0,0,-2.0,0.0)
                time.sleep(1)
                Car.send(0,0,2.0,0.0)
            if event.val['y'] == 1:
                Car.send(0,0,0.0,14)
            elif event.val['y'] == 2:
                Car.send(0,0,0.0,-14)

def emergency_stop():
    global state
    Car.send(0, 0, 0.0, 0.0)
    state = STOPPED

def handle_sign(event, sign_list ):
    global state
    sign_dict = event.val
    if sign_dict['sign'] == "Stop" and "STOP" not in sign_list:
        sign_list.append('STOP')

    elif sign_dict['sign'] == "Left" and "LEFT" not in sign_list:
        sign_list.append('LEFT')

    elif sign_dict['sign'] == 'Right' and "RIGHT" not in sign_list:
        sign_list.append('RIGHT')

    return

def handle_path_event(event, special_heading):
    global state
    path_dict = event.val
    if state == MOVING:
        # use the middle-of the road path return by the path detector
        heading = path_dict['heading'] + special_heading
        actuate_heading(heading)
    return


def actuate_heading(heading):
    speed = 4

    if heading < -15:  # ignore absurd angles
        heading = -15.0
        speed = 3.0  # turn quicker
    if heading > 15:  # ignore absurd angles
        heading = 15.0
        speed = 3.0

    Car.send(0, 0, speed, heading)
